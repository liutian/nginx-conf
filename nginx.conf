user nginx;
# nginx可以创建多少个工作进程来响应外部的请求，如果值为auto,nginx会自动判断
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx/pid;

# 单个工作进程可以打开的最大文件数，这里文件包括socket
# 设置后你的操作系统和Nginx可以处理比“ulimit -a”更多的文件，所以把这个值设高，这样nginx就不会有“too many open files”问题了。
worker_rlimit_nofile 100000;

# 在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗
worker_cpu_affinity 0001 0010 0100 1000;

events {
    #单个工作进程可以维持的最大连接数
    worker_connections 15000;
    #告诉nginx收到一个新连接通知后接受尽可能多的连接。
    #multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type  application/octet-stream;

    #关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的
    server_tokens off;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    #可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)
    #使用内核的 FD 文件传输功能，这个比在用户态用 read() + write() 的方式更加高效。
    sendfile on;

    #给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接。我们将它设置低些可以让ngnix持续工作的时间更长。
    keepalive_timeout 10;

    gzip on;
    gzip_min_length 1000;
    gzip_comp_level 8;
    gzip_buffers    4 16k;
    gzip_types text/plain text/css application/json text/javascript application/javascript;
    gzip_vary on; #会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据

    root /usr/share/nginx/html;
    index index.html;

    include /etc/nginx/conf.d/*.conf;

    #现在IP访问，允许的ip段
    # allow 180.166.66.226;
    # deny 120.2.3.4;//禁止ip访问
    # deny all;//禁止其他的IP访问

    #告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送
    #允许将 HTTP 应答首部与数据内容在同一个报文中发出。
    #这个选项使服务器在 sendfile 时可以提前准备 HTTP 首部，能够达到优化吞吐的效果。
    #tcp_nopush on;

    #告诉nginx不要缓存数据，而是一段一段的发送–当需要及时发送数据时，就应该给应用设置这个属性
    #不要缓存 data-sends （关闭 Nagle 算法），这个能够提高高频发送小数据报文的实时性。
    #tcp_nodelay on;

    #关闭这个选项可以让读取磁盘IO操作更快
    #access_log off;


    #单个客户端在 keep-alive 连接上可以发送的请求数量，在测试环境中，需要配置个比较大的值。
    #keepalive_requests 100000;

    #设置请求头和请求体(各自)的超时时间。我们也可以把这个设置低些。
    #client_header_timeout 10;
    #client_body_timeout 10;

    #关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
    #允许服务器在客户端停止发送应答之后关闭连接，以便释放连接相应的 socket 内存开销。
    #reset_timedout_connection on;

    #指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。
    #send_timeout 10;

    #设置用于保存各种key（比如当前连接数）的共享内存的参数。5m就是5兆字节，这个值应该被设置的足够大以存储（32K*5）32byte状态或者（16K*5）64byte状态。
    #limit_conn_zone $binary_remote_addr zone=addr:5m;

    #为给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。
    #limit_conn addr 100;

    #设置我们的头文件中的默认的字符集。
    #charset  utf-8;
    #client_max_body_size 10m;

    #缓存高频操作文件的FDs（文件描述符/文件句柄）
    #打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉
    #open_file_cache max=100000 inactive=20s;

    # 在open_file_cache中指定检测正确信息的间隔时间
    #open_file_cache_valid 30s;

    #定义了open_file_cache中指令参数不活动时间期间里最小的文件数。
    #open_file_cache_min_uses 2;

    #指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件
    #open_file_cache_errors on;


}
