user nginx;
# nginx可以创建多少个工作进程来响应外部的请求，如果值为auto则nginx会自动判断
worker_processes auto;
error_log /var/log/nginx/error.log error;
pid /var/run/nginx/pid;

# 单个工作进程可以打开的最大文件描述符的总数（包括socket链接），如果出现“too many open files”可能需要将该配置项调大
#worker_rlimit_nofile 50000;

# 在高并发情况下，为了充分利用cpu资源，将工作进程强制绑定到特定的cpu上
#worker_cpu_affinity 0001 0010 0100 1000;

events {
  #单个工作进程可以维持的最大连接数，包括代理时和上游服务器建立的链接
  worker_connections 30000;
}

http {
  include /etc/nginx/mime.types;
  default_type  application/octet-stream;

  #关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的
  server_tokens off;

  log_format  main  '$remote_addr [$time_local] "$request" "$request_time"'
                    '$status $body_bytes_sent "$http_referer" "$http_user_agent"';
  # buffer 日志缓冲区大小，gzip日志压缩级别，flush多长时间将缓冲区持久化到磁盘文件中
  # 如果关闭这个选项可以提高响应速度
  access_log  /var/log/nginx/access.log  main #buffer=64k gzip=2 flush=10s;
  # 当日志文件的路径中包含变量时，利用该配置项来缓存文件描述符，避免频繁打开日志文件造成的写入速度过慢
  # max:设置缓存中的最大文件描述数量 inactive:设置一个时间，如果在设置的时间内没有使用此文件描述，则自动删除此描述
  # min_uses:在参数inactive指定的时间范围内，如果日志文件使用次数没有超过改值，则该日志文件会从缓存中移除
  # valid:设置多长时间检查一次，看日志文件路径与文件名是否仍然存在
  #open_log_file_cache max=200 inactive=20s min-uses=2 valid=5m;

  #设置请求头的Content-Type字段
  charset  utf-8;

  root /usr/share/nginx/html;
  # 最后一个文件可以是绝对路径
  index index.html /index.html;

  # 响应静态资源时可以进行压缩处理节省网络带宽
  gzip on;
  gzip_min_length 1000;
  gzip_comp_level 8;
  #gzip_buffers 4 16k;
  gzip_types text/plain text/css application/json text/javascript application/javascript;

  # 可以尽可能快的将磁盘文件转换为socket数据并发送给客户端
  sendfile on;
  # 该配置项只有在sendfile on时才会激活，有利于将数据快速传递到客户端
  tcp_nopush on;

  # 服务器将在这个超时时间过后关闭链接
  keepalive_timeout 10s;
  # 告诉nginx不要缓存数据，应该及时发送数据时，当连接处于keep-alive时才有效
  #tcp_nodelay on;
  # 一个keep-alive连接能够处理多少请求
  #keepalive_requests 1000;

  # 根据IP地址或者网络段来进行限制白名单或者黑名单访问
  #allow 180.166.66.226;
  #deny all;//禁止其他的IP访问

  # 当socket关闭时将状态改为RST而不是FIN_WAIT1，充分利用socket资源
  reset_timedout_connection on;

  # 允许客户端发送多大的请求体
  client_max_body_size 10m;
  # 强制保存客户端请求到磁盘文件中
  #client_body_in_file_only on;

  # 指定客户端的响应时间。如果在规定时间客户端没有响应服务器的写操作则直接关闭连接
  #send_timeout 10s;

  # 创建一个共享内存来存储链接信息，如果数据超过指定内存大小则最早最少使用的数据被移除，如果还是不够用则直接报错
  #limit_conn_zone $binary_remote_addr zone=addr:50m;
  # 为给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。
  #limit_conn addr 100;

  # 创建一个共享内存来存储请求信息，如果数据超过指定内存大小则最早最少使用的数据被移除，如果还是不够用则直接报错
  # 单个IP一秒钟只处理一个请求
  #limit_req_zone $binary_remote_addr zone=one:50m rate=1r/s;
  # 如果超过指定请求速率则延迟后续的请求，如果延长的请求超过5个则直接报错
  #limit_req zone=one burst=5;

  # 限制服务器的响应速率
  #limit_rate 500k;
  # 服务器响应一定数据之后限制速率
  #limit_rate_after 2m;

  # 缓存高频操作文件描述符/文件大小/修改时间/文件查找中的错误信息
  #open_file_cache max=1000 inactive=10m;
  # 定时检测缓存中信息是否有效正确
  #open_file_cache_valid 30s;
  # 在inactive时间间隔中使用次数小于改值则会从缓存中移除
  #open_file_cache_min_uses 2;
  # 是否缓存文件错误信息
  #open_file_cache_errors on;

  #error_page 500 502 503 504 /50x.html;
  #error_page 404 403 405 =200 /empty.gif;
  #error_page 404 = /api/404;

  # 是否启用etag
  #etag on;
  # 如何比较客户端的If-Modified-Since字段值
  #if_modified_since

  # 添加或者自定义请求头字段，除非有always，否则响应码必须是：200, 201, 204, 206, 301, 302, 303, 304, 307, 308才能添加请求头
  #add_header test value1 [always];

  # 动态加载模块
  #load_module modules/ngx_mail_module.so;

  upstream backend {
    # 将上游服务器相关信息放入共享内存中，便于健康检查
    zone upstream 128k;
    # 根据url中的参数uuid来负载均衡
    #hash $arg_uuid; 
    # nginx根据自己生成的cookie来实现负载均衡
    #sticky cookie srv_id expires=1h domain=.example.com path=/;
    server 127.0.0.1:10003 max_fails=10 fail_timeout=10s;
    server 127.0.0.1:10004 max_fails=10 fail_timeout=10s;
    # 和上游服务器保持最少的空闲连接数
    #keepalive 20;
  }
  # 用于健康检查
  match welcome {
    status 200;
    header Content-Type = text/html;
    body ~ "Welcome to nginx!";
  }

  include /etc/nginx/conf.d/*.conf;
}
